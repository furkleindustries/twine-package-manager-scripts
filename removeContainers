#! /usr/bin/env python3

import argparse
import subprocess
import os

dirname = os.path.dirname(os.path.realpath(__file__))
compose_path = os.path.join(dirname, '../docker-compose.yml')

parser = argparse.ArgumentParser(description='Remove containerized ' +
                                 'versions of TwinePM services.')

parser.add_argument('--remove-all', '-a', action='store_true', default=None,
                    help='remove container images, volumes, and networks')

parser.add_argument('--exclude-base-images', '-e', action='store_true',
                    default=None, help='do not delete the base images')

base_images = ['postgres', 'php', 'redis', 'node', 'nginx']
parser.add_argument('--base-image-list', '-l', default=base_images,
                    nargs='+', help='set a prefix for the image name.')

args = parser.parse_args()

cmd = ['docker-compose', '-f', compose_path]
if args.remove_all:
    cmd.extend(['down', '--remove-orphans'])
else:
    cmd.append('rm')

proc = subprocess.Popen(cmd)
proc.communicate()

if args.remove_all and not args.exclude_base_images:
    cmd = ['docker', 'rmi'] + args.base_image_list
    proc = subprocess.Popen(cmd)
    proc.communicate()
    print('Base images removed.')

print('Containers removed.')